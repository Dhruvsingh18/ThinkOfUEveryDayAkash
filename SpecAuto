package org.firstinspires.ftc.teamcode.Autos;

import androidx.annotation.NonNull;
import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.TelemetryPacket;
import com.acmerobotics.roadrunner.Action;
import com.acmerobotics.roadrunner.ParallelAction;
import com.acmerobotics.roadrunner.Pose2d;
import com.acmerobotics.roadrunner.ProfileAccelConstraint;
import com.acmerobotics.roadrunner.SequentialAction;
import com.acmerobotics.roadrunner.TrajectoryActionBuilder;
import com.acmerobotics.roadrunner.TranslationalVelConstraint;
import com.acmerobotics.roadrunner.Vector2d;
import com.acmerobotics.roadrunner.ftc.Actions;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;

import org.firstinspires.ftc.teamcode.MecanumDrive;

import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.util.ElapsedTime;

@Config
@Autonomous(name = "GODSPEED", group = "Autonomous")
public class SpecAuto extends LinearOpMode {

    final int sampleDeposit = 1110;
    final int sampleDeposit1 = 1110 - 100;
    final int liftUpP1 = 1100;

    final int specPickupLiftPos = -925;
    final int extendPos = 1000;
    final int postHangPos = 520;
    final int preHangPos = 200;
    final int extension = 600;
    private double redValue;
    private double blueValue;


    public class Attachments {
        private DcMotor rightLift, leftLift, hort, intake;
        private Servo claw, extendDepo, tiltDepo, intakeTilt, wristClaw;

        private TouchSensor vertLimit, hortLimit;
        private ColorSensor colorChute, blockDetect;

        private long intakeStartTime;
        private static final long INTAKE_RUN_TIME = 2000;

        public void intakeDown() {

            intakeTilt.setPosition(0.55);
        }

        public void intakeReset() {

            intakeTilt.setPosition(0.5);
        }

        public void intakePickPos() {

            intakeTilt.setPosition(0.45);//0.61
        }

        public void backPos(){

            intakeTilt.setPosition(0.55);
        }

        public void intakeSpit() {

            intakeTilt.setPosition(0.6);//0.61
        } //0.71


        public void clawOpen() {

            claw.setPosition(0.12);
        }

        public void clawClose() {

            claw.setPosition(0.8);
        }

        public void depoCeiling() {
            extendDepo.setPosition(0.71);
            tiltDepo.setPosition(0.17);

        }

        public void specPickup() {
            tiltDepo.setPosition(0.24);
            extendDepo.setPosition(0.9);
            wristClaw.setPosition(0.79); //0.8
        }

        public void specPos() {
            tiltDepo.setPosition(0.04);
            extendDepo.setPosition(0.93);
            wristClaw.setPosition(0.79);
        }

        public void resetPos() {
            tiltDepo.setPosition(0.02);//0.11
            wristClaw.setPosition(0.79); //0.8
            extendDepo.setPosition(0.5);//0.655

        }

        public void depositPos() {
            tiltDepo.setPosition(0.22);
            extendDepo.setPosition(0.71);
        }


        public void colorTelmetry() {
            telemetry.addData("red", "%.2f", redValue);
            telemetry.addData("blue", "%.2f", blueValue);
        }

        public Attachments(@NonNull HardwareMap hardwareMap) {
            //Intake
            tiltDepo = hardwareMap.get(Servo.class, "tiltDepo");
            extendDepo = hardwareMap.get(Servo.class, "extendDepo");
            hort = hardwareMap.get(DcMotorEx.class, "extension");
            intake = hardwareMap.get(DcMotorEx.class, "intake");

            intakeTilt = hardwareMap.get(Servo.class, "intakeTilt");
            claw = hardwareMap.get(Servo.class, "claw");
            wristClaw = hardwareMap.get(Servo.class, "wristClaw");

            //Slides
            rightLift = hardwareMap.get(DcMotorEx.class, "rightVert");
            leftLift = hardwareMap.get(DcMotorEx.class, "leftVert");


            rightLift.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
            leftLift.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);


            //Limit-Switches
            vertLimit = hardwareMap.get(TouchSensor.class, "vertSwitch");
            hortLimit = hardwareMap.get(TouchSensor.class, "hortSwitch");

            //colorChute = hardwareMap.get(ColorSensor.class, "colorChute");
            blockDetect = hardwareMap.get(ColorSensor.class, "blockDetect");

            rightLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            leftLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

            // Set motors to run using encoders
            rightLift.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            leftLift.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            leftLift.setDirection(DcMotor.Direction.REVERSE);

            backPos();
            intakeReset();
            //resetPos();

        }
        public class PostLiftUp implements Action {
            private boolean initialized = false;

            @Override
            public boolean run(@NonNull TelemetryPacket packet) {

                    rightLift.setPower(1);
                    leftLift.setPower(1);
                    sleep(500);
                    rightLift.setPower(0);
                    leftLift.setPower(0);
                    telemetry.addData("Slides:", "Reached pos");
                    telemetry.update();

                    return false;
            }
        }

        public Action postLiftUp() {

            return new PostLiftUp();
        }

        public class LiftUp implements Action {
            private boolean initialized = false;

            @Override
            public boolean run(@NonNull TelemetryPacket packet) {

                double pos = rightLift.getCurrentPosition();

                telemetry.addData("Slide Encoder Position", pos);
                telemetry.update();
                sleep(100);

                if (pos < sampleDeposit) {

                    rightLift.setPower(1);
                    leftLift.setPower(1);
                    telemetry.addData("Slides:", "Reached pos");
                    telemetry.update();
                    return true;

                } else {

                    rightLift.setPower(0.13);
                    leftLift.setPower(0.13);

                    /*
                     rightLift.setPower(0.13);
                     leftLift.setPower(-0.13);
                     */
                    rightLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

                    rightLift.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

                    return false;
                }


            }
        }

        public Action liftUp() {

            return new LiftUp();
        }

        public class LiftUpDep1 implements Action {
            private boolean initialized = false;

            @Override
            public boolean run(@NonNull TelemetryPacket packet) {

                double pos = rightLift.getCurrentPosition();

                telemetry.addData("Slide Encoder Position", pos);
                telemetry.update();
                sleep(100);

                if (pos < sampleDeposit1) {

                    rightLift.setPower(1);
                    leftLift.setPower(1);
                    telemetry.addData("Slides:", "Reached pos");
                    telemetry.update();
                    return true;

                } else {

                    rightLift.setPower(0.13);
                    leftLift.setPower(0.13);

                    /*
                     rightLift.setPower(0.13);
                     leftLift.setPower(-0.13);
                     */
                    rightLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

                    rightLift.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

                    return false;
                }


            }
        }

        public Action liftUpDep1() {

            return new LiftUpDep1();
        }

        public class SpecLift implements Action {
            private boolean initialized = false;

            @Override
            public boolean run(@NonNull TelemetryPacket packet) {

                double pos = rightLift.getCurrentPosition();

                telemetry.addData("Slide Encoder Position", pos);
                telemetry.update();
                sleep(100);

                if (pos > specPickupLiftPos) {

                    rightLift.setPower(-1);
                    leftLift.setPower(-1);
                    telemetry.addData("Slides:", "Reached pos");
                    telemetry.update();
                    return true;

                } else {

                    rightLift.setPower(0.13);
                    leftLift.setPower(0.13);

                    /*
                     rightLift.setPower(0.13);
                     leftLift.setPower(-0.13);
                     */

                    rightLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

                    rightLift.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

                    return false;
                }


            }
        }

        public Action specLift() {

            return new SpecLift();
        }

        public class LiftReset implements Action {
            private boolean initialized = false;

            @Override
            public boolean run(@NonNull TelemetryPacket packet) {
                rightLift.setPower(-1);
                leftLift.setPower(-1);
                sleep(500);

                rightLift.setPower(0);
                leftLift.setPower(0);


                if (!vertLimit.isPressed()) {
                    rightLift.setPower(-1);
                    leftLift.setPower(-1);

                    return true;

                } else {
                    rightLift.setPower(0);
                    leftLift.setPower(0);

                    rightLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

                    rightLift.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

                    return false;



                }


            }
        }

        public Action liftReset() {

            return new LiftReset();
        }

        public class LiftDownClip implements Action {
            private boolean initialized = false;

            @Override
            public boolean run(@NonNull TelemetryPacket packet) {


                rightLift.setPower(-0.7);
                leftLift.setPower(-0.7);
                sleep(1300);
                rightLift.setPower(0);
                leftLift.setPower(0);
                claw.setPosition(0.46);

                return false;
            }


        }


        public Action liftDownClip() {

            return new LiftDownClip();
        }

        public class VertReset implements Action {
            private boolean initialized = false;
            private ElapsedTime timer = new ElapsedTime();

            @Override
            public boolean run(@NonNull TelemetryPacket packet) {
                if (!initialized) {
                    timer.reset();
                    initialized = true;
                }

                double elapsedTime = timer.milliseconds();

                if (elapsedTime < 1300) {
                    rightLift.setPower(-0.7);
                    leftLift.setPower(-0.7);
                } else {
                    rightLift.setPower(0);
                    leftLift.setPower(0);
                    claw.setPosition(0.46);

                    rightLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

                    rightLift.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                    leftLift.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                    return false; // Action complete
                }

                return true; // Continue running
            }
        }

        public Action vertReset() {
            return new VertReset();
        }
        public class MyReset implements Action {
            private boolean initialized = false;
            private long startTime;
            private final long duration = 2000; // Default duration in milliseconds
            private final double liftPower = -1; // Default lift power

            @Override
            public boolean run(@NonNull TelemetryPacket packet) {
                if (!initialized) {
                    // Initialize the action
                        rightLift.setPower(-0.7);
                        leftLift.setPower(-0.7);
                    }

                    startTime = System.currentTimeMillis();
                    initialized = true;

                // Check if the elapsed time has exceeded the duration
                if (System.currentTimeMillis() - startTime >= duration) {
                    // Stop the lift motors
                    rightLift.setPower(0);
                    leftLift.setPower(0);
                    return true;
                }

                // Action is still running
                return false;
            }
        }

        // Method to create the MyReset action
        public Action myReset() {
            return new MyReset();
        }


        // within the Claw class
        public class CloseClaw implements Action {
            @Override
            public boolean run(@NonNull TelemetryPacket packet) {
                clawClose();
                return false;
            }
        }

        public Action closeClaw() {

            return new CloseClaw();
        }

        public class OpenClaw implements Action {
            @Override
            public boolean run(@NonNull TelemetryPacket packet) {
                //edit
                clawOpen();

                return false;
            }
        }

        public Action openClaw() {

            return new OpenClaw();
        }


        public class DepoReset implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {
                resetPos();
                return false;
            }
        }

        public Action depoReset() {

            return new DepoReset();

        }

        public class DepoUp implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {
                depoCeiling();
                sleep(200);
                return false;
            }
        }

        public Action depoUp() {

            return new DepoUp();

        }

        public class DepoSample implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {
                depositPos();
                return false;
            }
        }

        public Action depoSample() {

            return new DepoSample();

        }

        public class ClipPos implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {
                specPos();
                return false;
            }
        }

        public Action clipPos() {

            return new ClipPos();

        }

        public class DepoSpecPick implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {

                specPickup();

                return false;
            }
        }

        public Action depoSpecPick() {

            return new DepoSpecPick();

        }

        public class ExtendHort implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {

                intakeReset();
                hort.setPower(-1);
                sleep(1200);
                return false;

            }

        }


        public Action extendHort() {

            return new ExtendHort();
        }

        public class retractHorizontal implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {

                if (!hortLimit.isPressed()) {
                    hort.setPower(1);
                    return true;
                } else {
                    hort.setPower(0);
                    telemetry.addData("Hort","Retracted");
                    telemetry.update();


                    return false;


                }
            }
        }

        public Action RetractHorizontal() {

            return new retractHorizontal();
        }


        public class IntakeThaThang implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {
                intakePickPos();
                intake.setPower(-1);
                sleep(900);

                return false;


            }
        }

        public Action intakeThaThang() {

            return new IntakeThaThang();
        }


        public class ResetThaThang implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {
                intakeReset();
                sleep(100);
                return false;
            }


        }

        public Action resetThaThang() {

            return new ResetThaThang();
        }


        public class SpitThaThang implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {


                intakeSpit();
                intake.setPower(1);
                sleep(650);


                return false;


            }
        }

        public Action spitThaThang() {

            return new SpitThaThang();
        }



        public class intakeOff implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {


                intakeReset();
                intake.setPower(0);
                return false;


            }
        }

        public Action IntakeOff() {

            return new intakeOff();
        }

        public class sleepRobot implements Action {

            @Override
            public boolean run(@NonNull TelemetryPacket telemetryPacket) {
                telemetry.addData("sleep", "sl");
                telemetry.update();
                sleep(2000);
                return false;


            }
        }

        public Action sleepRobot() {

            return new sleepRobot();
        }

    }


    @Override
    public void runOpMode() {


        Pose2d initialPose = new Pose2d(10, -65, Math.toRadians(270));
        MecanumDrive drive = new MecanumDrive(hardwareMap, initialPose);
        Attachments attachments = new Attachments(hardwareMap);


        TrajectoryActionBuilder preLoad = drive.actionBuilder(initialPose).fresh()


                .setTangent(Math.toRadians(110))
                //  .lineToY(-35)

                .lineToYLinearHeading(-45, Math.toRadians(270), new TranslationalVelConstraint(20), new ProfileAccelConstraint(-20,20));


        TrajectoryActionBuilder FirstPickup =  preLoad.endTrajectory().fresh()

                /*
                //could be commented out
                .setTangent(Math.toRadians(100))
                .lineToYLinearHeading(-45, Math.toRadians(270), new TranslationalVelConstraint(20), new ProfileAccelConstraint(-20,20))


                 */
                .setTangent(Math.toRadians(100))
                .lineToYLinearHeading(-57, Math.toRadians(270), new TranslationalVelConstraint(20), new ProfileAccelConstraint(-20,20))

                .setTangent(Math.toRadians(180))
                .lineToXLinearHeading(45, Math.toRadians(270))
                .setTangent(Math.toRadians(90))
                .lineToYLinearHeading(-76.5, Math.toRadians(270), new TranslationalVelConstraint(20), new ProfileAccelConstraint(-20,20));

                //68.5

        TrajectoryActionBuilder FirstDeposit = FirstPickup.endTrajectory().fresh()
                .setTangent(Math.toRadians(90))
                .splineTo(new Vector2d(12,-61), Math.toRadians(90))//86 bf
                .setTangent(Math.toRadians(90))

                .lineToYLinearHeading(-55, Math.toRadians(270)); //-44
                //.lineToYLinearHeading(-39, Math.toRadians(270));

        TrajectoryActionBuilder PosPush = FirstDeposit.endTrajectory().fresh()


                .setTangent(Math.toRadians(90))
                .lineToYLinearHeading(-58, Math.toRadians(270))

                .setTangent(Math.toRadians(180))

                .lineToXLinearHeading(47, Math.toRadians(270))// mine is 48

                .setTangent(Math.toRadians(90))

                .splineTo(new Vector2d(49, -20), Math.toRadians(90));


        TrajectoryActionBuilder Push1 = PosPush.endTrajectory().fresh()
                .setTangent(Math.toRadians(90))
                .lineToYLinearHeading(-89, Math.toRadians(270), new TranslationalVelConstraint(110))
                .lineToYLinearHeading(-86,Math.toRadians(270),  new TranslationalVelConstraint(110))
                .waitSeconds(2)
                .lineToYLinearHeading(-84,Math.toRadians(270),  new TranslationalVelConstraint(20));

        //.lineToY(-60, new TranslationalVelConstraint(20));
                //.lineToY(-10, new TranslationalVelConstraint(110))

        TrajectoryActionBuilder Deposit2 = Push1.endTrajectory().fresh()

                .setTangent(Math.toRadians(90))

                .lineToY(-84, new TranslationalVelConstraint(20))


                .setTangent(Math.toRadians(270))

                .lineToYLinearHeading(-70, Math.toRadians(270))

                /*
                .setTangent(Math.toRadians(180))

                .lineToXLinearHeading(20, Math.toRadians(270))

                .setTangent(Math.toRadians(90))

                .lineToYLinearHeading(-50,Math.toRadians(270));

                 */
                .setTangent(Math.toRadians(90))
                .splineTo(new Vector2d(20,-65), Math.toRadians(87));

        /*
        TrajectoryActionBuilder Push2 = Push1.endTrajectory().fresh()

                .setTangent(Math.toRadians(180))
                .lineToX(56, new TranslationalVelConstraint(110)) // mine is 48
                .setTangent(Math.toRadians(90))
                .lineToY(-58, new TranslationalVelConstraint(110))
                .lineToY(-10, new TranslationalVelConstraint(110));

        TrajectoryActionBuilder Push3 = Push2.endTrajectory().fresh()
                //block 3
                .setTangent(Math.toRadians(180))-
                .lineToX(65, new TranslationalVelConstraint(110))
                .setTangent(Math.toRadians(90))
                .lineToY(-58, new TranslationalVelConstraint(110));

        TrajectoryActionBuilder Park = Push3.endTrajectory().fresh()
                .splineTo(new Vector2d(28, -10), Math.toRadians(90));

         */



        Actions.runBlocking(
                new SequentialAction(
                        attachments.depoSpecPick(),
                        attachments.closeClaw()
                        //attachments.vertReset()

                        //attachments.depoReset()


                )

        );



        waitForStart();

        if (isStopRequested()) return;
        Actions.runBlocking(
                new SequentialAction(
                        new ParallelAction(
                        attachments.liftUp(),
                        preLoad.build()
                                )

                        ));

        /*
        Actions.runBlocking(
                new SequentialAction(
                        attachments.liftUp()
                ));

         */

        Actions.runBlocking(
                new SequentialAction(
                        attachments.postLiftUp(),
                        attachments.openClaw(),

                        new ParallelAction(
                                FirstPickup.build(),
                                attachments.depoReset(),
                                attachments.vertReset()
                                ),

                        //attachments.liftReset(),
                        //attachments.vertReset(),
        attachments.closeClaw(),

                        new ParallelAction(
                                attachments.liftUpDep1(),
                                attachments.depoSpecPick(),
                                FirstDeposit.build()
                        ),

                        attachments.postLiftUp(),
                        attachments.openClaw(),


                        PosPush.build(),
                        new ParallelAction(
                                attachments.depoReset(),
                                attachments.vertReset(),
                                Push1.build()
                        ),

                        attachments.liftReset(),
                        attachments.closeClaw(),

                        new ParallelAction(
                                attachments.liftUpDep1(),
                                attachments.depoSpecPick(),
                                Deposit2.build()
                        ),
                        attachments.postLiftUp()

                        /*
                        Push2.build(),
                        Push3.build(),
                        Park.build()

                         */


                ));

        /*
        Actions.runBlocking(

                new SequentialAction(
                        new ParallelAction(
                                FirstDeposit.build(),
                                attachments.liftUp()

                        ),

                attachments.postLiftUp(),
                attachments.openClaw(),

                )
        );

         */










    }

}
